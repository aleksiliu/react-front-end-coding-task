{"version":3,"sources":["img/close.svg","components/Button.js","components/Modal.js","components/Checkbox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Button","props","react_default","a","createElement","className","variant","onClick","children","Modal","_ref","handleClose","show","src","close","alt","src_components_Button","Checkbox","_ref$type","type","isChecked","value","onChange","name","checked","App","state","products","product","price","id","_this","setState","map","Object","objectSpread","showModal","hideModal","_this2","this","src_components_Modal","key","src_components_Checkbox","filter","reduce","b","toFixed","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25bfad5e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/close.11e81073.svg\";","import React from 'react';\nimport './Button.css';\n\nconst Button = props => {\n  return (\n    <button className={props.variant} onClick={props.onClick}>\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport './Modal.css';\nimport Button from './Button';\nimport close from '../img/close.svg';\n\nconst Modal = ({ handleClose, show, children }) => {\n  return (\n    <div className={show ? 'modal show' : 'modal hide'}>\n      <img src={close} alt=\"\" className=\"close\" onClick={handleClose} />\n      <section className=\"modal-main\">\n        {children}\n        <Button variant=\"secondary\" onClick={handleClose}>\n          Done\n        </Button>\n      </section>\n    </div>\n  );\n};\n\nexport default Modal;\n","import React from 'react';\nimport './Checkbox.css';\n\nconst Checkbox = ({ type = 'checkbox', value, isChecked, onChange }) => (\n  <input type={type} name=\"isChecked\" checked={isChecked} onChange={onChange} />\n);\n\nexport default Checkbox;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Modal from './components/Modal';\nimport Button from './components/Button';\nimport Checkbox from './components/Checkbox';\n\nclass App extends Component {\n  state = {\n    show: false,\n    products: [\n      {\n        product: 'Liability insurance',\n        price: 66.35,\n        id: 1,\n        isChecked: false\n      },\n      {\n        product: 'Repairs expenses insurance',\n        price: 83.49,\n        id: 2,\n        isChecked: false\n      },\n      {\n        product: 'Destruction insurance',\n        price: 83.49,\n        id: 3,\n        isChecked: false\n      }\n    ]\n  };\n\n  onChange = id => {\n    this.setState({\n      products: this.state.products.map(product => {\n        if (product.id === id) {\n          return {\n            ...product,\n            isChecked: !product.isChecked\n          };\n        } else {\n          return product;\n        }\n      })\n    });\n  };\n\n  showModal = () => {\n    this.setState({ show: true });\n  };\n\n  hideModal = () => {\n    this.setState({ show: false });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"content\">\n          <h1> Car insurance </h1>\n          <p>Take good care of your beloved car and purchase an insurance.</p>\n          <Modal show={this.state.show} handleClose={this.hideModal}>\n            <h2> Select the insurance</h2>\n            <form>\n              {this.state.products.map(product => (\n                <label\n                  key={product.id}\n                  className={product.isChecked ? 'selected' : ''}\n                >\n                  <span className=\"product-title\">{product.product}</span>{' '}\n                  <span>{product.price}€</span>\n                  <Checkbox\n                    name=\"isChecked\"\n                    type=\"checkbox\"\n                    checked={product.isChecked}\n                    onChange={() => this.onChange(product.id)}\n                  />\n                </label>\n              ))}\n            </form>\n\n            <div className=\"selected-items\">\n              <p>\n                Total{' '}\n                <span>\n                  {this.state.products\n                    .filter(product => product.isChecked)\n                    .map(product => product.price)\n                    .reduce((a, b) => a + b, 0)\n                    .toFixed(2)}\n                  €\n                </span>\n              </p>\n            </div>\n          </Modal>\n\n          <Button\n            variant=\"primary\"\n            onClick={() => {\n              this.showModal();\n            }}\n          >\n            See more\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}