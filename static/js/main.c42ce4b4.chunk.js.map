{"version":3,"sources":["components/Button.js","components/Checkbox.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","className","variant","onClick","children","Checkbox","_ref","_ref$type","type","name","value","checked","onChange","customStyles","content","top","left","right","bottom","marginRight","transform","textAlign","border","Modal","setAppElement","App","state","modalIsOpen","products","product","price","id","isChecked","openModal","_this","setState","closeModal","console","log","map","Object","objectSpread","_this2","this","src_components_Button","lib_default","isOpen","onRequestClose","style","contentLabel","key","src_components_Checkbox","filter","reduce","b","toFixed","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c42ce4b4.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.css';\n\nconst Button = props => {\n  return (\n    <button className={props.variant} onClick={props.onClick}>\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport './Checkbox.css';\n\nconst Checkbox = ({ type = 'checkbox', value, name, checked, onChange }) => (\n  <input type={type} name={name} checked={checked} onChange={onChange} />\n);\n\nexport default Checkbox;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Button from './components/Button';\nimport Checkbox from './components/Checkbox';\n\nimport Modal from 'react-modal';\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)',\n    textAlign: 'center',\n    border: '0'\n  }\n};\n\nModal.setAppElement('#root');\n\nclass App extends Component {\n  state = {\n    modalIsOpen: true,\n    products: [\n      {\n        product: 'Liability insurance',\n        price: 66.35,\n        id: 1,\n        isChecked: true\n      },\n      {\n        product: 'Repairs expenses insurance',\n        price: 83.49,\n        id: 2,\n        isChecked: false\n      },\n      {\n        product: 'Destruction insurance',\n        price: 83.49,\n        id: 3,\n        isChecked: false\n      }\n    ]\n  };\n\n  openModal = () => {\n    this.setState({ modalIsOpen: true });\n  };\n\n  closeModal = () => {\n    this.setState({ modalIsOpen: false });\n  };\n\n  onChange = id => {\n    console.log(id);\n    this.setState({\n      products: this.state.products.map(product => {\n        if (product.id === id) {\n          return {\n            ...product,\n            isChecked: !product.isChecked\n          };\n        } else {\n          return product;\n        }\n      })\n    });\n  };\n\n  render() {\n    console.log(this.state.products[0]);\n    return (\n      <div className=\"container\">\n        <div className=\"content\">\n          <h1> Car insurance </h1>\n          <p>Take good care of your beloved car and purchase an insurance.</p>\n          <Button variant=\"primary\" onClick={this.openModal}>\n            See more\n          </Button>\n          <Modal\n            isOpen={this.state.modalIsOpen}\n            onRequestClose={this.closeModal}\n            style={customStyles}\n            contentLabel=\"Modal\"\n          >\n            <h2> Select the insurance</h2>\n            <form>\n              {this.state.products.map(product => (\n                <label\n                  key={product.id}\n                  className={product.isChecked ? 'selected' : ''}\n                >\n                  <span className=\"product-title\">{product.product}</span>\n                  <span>{product.price}€</span>\n                  <Checkbox\n                    name={product.product}\n                    type=\"checkbox\"\n                    checked={product.isChecked}\n                    onChange={() => this.onChange(product.id)}\n                  />\n                </label>\n              ))}\n            </form>\n\n            <div className=\"selected-items\">\n              <p>\n                Total{' '}\n                <span>\n                  {this.state.products\n                    .filter(product => product.isChecked)\n                    .map(product => product.price)\n                    .reduce((a, b) => a + b, 0)\n                    .toFixed(2)}\n                  €\n                </span>\n              </p>\n            </div>\n            <Button variant=\"secondary\" onClick={this.closeModal}>\n              Done\n            </Button>\n          </Modal>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}